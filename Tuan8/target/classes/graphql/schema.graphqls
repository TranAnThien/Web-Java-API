type User {
    id: ID!
    fullname: String
    email: String
    phone: String
}

type Category {
    id: ID!
    name: String
    images: String
}

type Product {
    id: ID!
    title: String
    quantity: Int
    desc: String
    price: Float
    user: User
    category: Category
}

type Query {
    productsSortedByPrice: [Product]
    productsByCategory(categoryId: ID!): [Product]
    findProductById(id: ID!): Product

    allUsers: [User]
    findUserById(id: ID!): User

    allCategories: [Category]
    findCategoryById(id: ID!): Category
}

input UserInput {
    fullname: String!
    email: String!
    password: String!
    phone: String
}

input CategoryInput {
    name: String!
    images: String
}

input ProductInput {
    title: String!
    quantity: Int!
    desc: String
    price: Float!
    userId: ID!
    categoryId: ID!
}

type Mutation {
    createUser(input: UserInput!): User
    updateUser(id: ID!, input: UserInput!): User
    deleteUser(id: ID!): Boolean

    createCategory(input: CategoryInput!): Category
    updateCategory(id: ID!, input: CategoryInput!): Category
    deleteCategory(id: ID!): Boolean

    createProduct(input: ProductInput!): Product
    updateProduct(id: ID!, input: ProductInput!): Product
    deleteProduct(id: ID!): Boolean
}